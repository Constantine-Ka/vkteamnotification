package api

import (
	"encoding/base64"
	"github.com/jmoiron/sqlx"
	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	"go.uber.org/zap"
	"net/http"
	"simplevkteamnotifiction/configs"
	"simplevkteamnotifiction/internal/repository"
	"strconv"
	"time"
)

func Server(db *sqlx.DB, tablnames configs.Tables, logger *zap.Logger) {
	e := echo.New()
	e.GET("/", func(c echo.Context) error {
		return c.String(http.StatusOK, "Hello, World!")
	})
	a := e.Group("/api", middleware.BasicAuth(func(username, password string, c echo.Context) (bool, error) {
		for _, cookie := range c.Cookies() {
			if cookie.Name == "user_id" {
				e.Logger.Infof("", "Авторизация по cookie:", cookie)
				return true, nil
			}
		}
		e.Logger.Infof("", c.Path(), " Middleware-авторизация basicAuth %s", base64.StdEncoding.EncodeToString([]byte(username+":"+password)))
		userId := repository.Auth(db, tablnames.Userlist, username, password)
		if userId != 0 {
			cookie := new(http.Cookie)
			cookie.Name = "user_id"
			cookie.Value = strconv.Itoa(userId)
			cookie.Expires = time.Now().Add(24 * time.Hour)
			c.SetCookie(cookie)
			return true, nil
		}
		e.Logger.Warn("Неудачная попытка авторизации: ", username, ":", password)
		return false, nil
	}))
	a.PUT("/send", func(c echo.Context) error {
		return c.String(http.StatusOK, "200")
	})
	e.Logger.Fatal(e.Start(":1011"))
}
